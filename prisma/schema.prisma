// This isyourPrismaschemafile,
//learnmoreaboutitinthedocs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  SUBSCRIPTION
  PURCHASE
}

model User {
  id                 Int                  @id @default(autoincrement())
  fullName           String
  userName           String?
  email              String               @unique
  password           String?
  about              String?
  otp                String?
  fcm_token          String?
  act_token          String?
  profilePic         String?
  avatar_url         String?
  numberOfFollower   Int                  @default(0)
  numberOfFollowing  Int                  @default(0)
  notes              String?              @db.LongText
  token              String?
  isOnline           Int                  @default(0)
  isVerified         Boolean              @default(false)
  otpExpiration      DateTime?
  followers          Follow[]             @relation("UserFollowers")
  status             Int                  @default(1)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Book               Book[]
  Favorite           Favorite[]
  Cart               Cart[]
  ChatParticipant    ChatParticipant[]
  ChatMessage        ChatMessage[]
  UserActivateChat   UserActivateChat[]
  UserUnreadCount    UserUnreadCount[]
  ActiveChat         ActiveChat[]
  Review             Review[]
  BookRead           BookRead[]
  UserNotification   UserNotification[]
  Notification       Notification[]
  AuthorNotification AuthorNotification[]
  ContactIssue       ContactIssue[]
  Transaction        Transaction[]
  Purchase           Purchase[]
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId    Int
  rating    Int      @default(0) // Rating between 1-5
  comment   String? // Optional review comment
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followerId  Int
  following   Author   @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followingId Int
  isFollowed  Boolean  @default(false)
  status      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserNotification {
  id        Int      @id @default(autoincrement())
  userId    Int
  senderId  Int
  title     String
  body      String
  type      String // e.g., 'message', 'follow'
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Notification {
  id           Int      @id @default(autoincrement())
  byUser       User?    @relation(fields: [byUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  byUserId     Int?
  byAdmin      Admin?   @relation(fields: [byAdminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  byAdminId    Int?
  byAuthor     Author?  @relation(fields: [byAuthorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  byAuthorId   Int?
  toUserId     Int
  isRead       Boolean  @default(false)
  content      String?
  type         String?
  followStatus Int      @default(0)
  data         Json?    @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AuthorNotification {
  id         Int      @id @default(autoincrement())
  byUser     User?    @relation(fields: [byUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  byUserId   Int?
  byAdmin    Admin?   @relation(fields: [byAdminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  byAdminId  Int?
  toAuthor   Author?  @relation(fields: [toAuthorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  toAuthorId Int?
  isRead     Boolean  @default(false)
  content    String?
  type       String?
  data       Json?    @default("{}")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Plan {
  id            Int            @id @default(autoincrement())
  name          String
  duration      String
  price         Float
  features      Json // Store features as a JSON array
  createdAt     DateTime       @default(now())
  subscriptions Subscription[]
}

model Subscription {
  id        Int       @id @default(autoincrement())
  authorId  Int
  planId    Int
  amount    Float?
  status    String    @default("active") // active, cancelled, expired
  startDate DateTime  @default(now())
  endDate   DateTime?

  author Author @relation(fields: [authorId], references: [id])
  plan   Plan   @relation(fields: [planId], references: [id])
}

model Admin {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  phone_no      String?        @unique
  fullName      String
  isVerified    Boolean        @default(false)
  password      String
  status        Int            @default(1)
  otp           String?
  otpExpiration DateTime?
  avatar_url    String?
  fcm_token     String?
  act_token     String?
  token         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Notification  Notification[]

  AuthorNotification AuthorNotification[]
}

model Author {
  id                 Int                  @id @default(autoincrement())
  fullName           String?
  email              String?              @unique
  password           String?
  tagline            String?
  status             Int                  @default(1)
  otp                String?
  dob                DateTime?
  otpExpiration      DateTime?
  onboardingComplete Boolean              @default(false)
  stripeAccountId    String? // For Stripe Connect payouts
  subscribedUntil    DateTime? // Subscription expiration date
  fcm_token          String?
  avatar_url         String?
  coverImage         String?
  act_token          String?
  isVerified         Boolean              @default(false)
  isOnline           Int                  @default(0)
  token              String?
  bio                String?
  profilePic         String?
  instagram          String?
  facebook           String?
  genres             String?
  isCreatedByAdmin   Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  books              Book[]               @relation("AuthorBooks")
  following          Follow[]             @relation("UserFollowing")
  Chat               Chat[]               @relation("ChatAdmin") // Added this to complete the relation
  ChatParticipant    ChatParticipant[]
  ChatMessage        ChatMessage[]
  Notification       Notification[]
  AuthorActivateChat AuthorActivateChat[]
  AuthorUnreadCount  AuthorUnreadCount[]
  AuthorCategory     AuthorCategory[]

  AuthorNotification AuthorNotification[]
  QASession          QASession[]
  Transaction        Transaction[]
  BankInfo           BankInfo[]
  Subscription       Subscription[]
  Purchase           Purchase[]
}

model BankInfo {
  id         Int      @id @default(autoincrement())
  accountId  String // Stripe account ID
  customerId String // Stripe customer ID
  bankInfo   Json
  createdAt  DateTime @default(now())

  authorId Int?
  author   Author? @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Transaction {
  id        Int             @id @default(autoincrement())
  type      TransactionType
  authorId  Int? // For author subscriptions
  userId    Int? // For user purchases
  bookId    Int?
  amount    Float
  stripeRef String
  status    String
  createdAt DateTime        @default(now())

  author Author? @relation(fields: [authorId], references: [id])
  user   User?   @relation(fields: [userId], references: [id])
  book   Book?   @relation(fields: [bookId], references: [id])
}

model Purchase {
  id               Int      @id @default(autoincrement())
  purchaseId       String   @unique
  userId           Int
  bookId           Int
  authorId         Int
  price            Float
  costPrice        Float?
  quantity         Int      @default(1)
  discount         Float?
  commissionAmount Float?
  authorEarning    Float?
  paymentMethod    String?
  status           String   @default("paid")
  isHeld           Boolean  @default(false)
  createdAt        DateTime @default(now())

  user   User?   @relation(fields: [userId], references: [id])
  book   Book?   @relation(fields: [bookId], references: [id])
  author Author? @relation(fields: [authorId], references: [id])
}

model Book {
  id          Int            @id @default(autoincrement())
  title       String
  description String?
  userId      Int?
  user        User?          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId    Int?
  author      Author?        @relation("AuthorBooks", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  price       Float?
  isFree      Boolean        @default(true)
  costPrice   Float?
  type        Int            @default(1) //type=1, type=2
  stock       Int            @default(0)
  coverImage  String?
  publishedAt DateTime       @default(now())
  pdfUrl      String?
  audioUrl    String?
  bookMedia   BookMedia[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  books       BookCategory[]
  Favorite    Favorite[]
  cartItems   Cart[]
  Review      Review[]
  BookRead    BookRead[]
  Transaction Transaction[]
  Purchase    Purchase[]
}

model BookRead {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId    Int
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  progress  Float? // Percentage of book read (optional)
  views     Int      @default(1) // Number of times the book has been read
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
}

model Category {
  id      Int              @id @default(autoincrement())
  name    String           @unique
  books   BookCategory[]
  authors AuthorCategory[]
}

model AuthorCategory {
  id         Int      @id @default(autoincrement())
  authorId   Int
  categoryId Int
  author     Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([authorId, categoryId])
}

model BookCategory {
  id         Int      @id @default(autoincrement())
  bookId     Int
  categoryId Int
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([bookId, categoryId])
}

model BookMedia {
  id       Int    @id @default(autoincrement())
  bookId   Int
  book     Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  mediaUrl String // URL of the image or media file
  type     String // "image", "audio", "video", "pdf"

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Chat {
  id                 Int                  @id @default(autoincrement())
  name               String?
  profilePic         String? // URL or path to the profile picture
  description        String? // Chat description
  lastMessage        ChatMessage?         @relation("LastMessage", fields: [lastMessageId], references: [id])
  lastMessageId      Int?                 @unique
  isGroupChat        Boolean              @default(false)
  adminId            Int?
  admin              Author?              @relation("ChatAdmin", fields: [adminId], references: [id], onDelete: Cascade)
  participants       ChatParticipant[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  ChatMessage        ChatMessage[]        @relation("ChatMessages")
  UserActivateChat   UserActivateChat[]
  UserUnreadCount    UserUnreadCount[]
  AuthorActivateChat AuthorActivateChat[]
  AuthorUnreadCount  AuthorUnreadCount[]
  ActiveChat         ActiveChat[]
}

model ActiveChat {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model ChatParticipant {
  id       Int     @id @default(autoincrement())
  chatId   Int
  userId   Int?
  authorId Int?
  Chat     Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User     User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Author   Author? @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([chatId, userId, authorId])
}

model ChatMessage {
  id               Int                @id @default(autoincrement())
  content          String?            @db.LongText
  senderUserId     Int?
  senderAuthorId   Int?
  chatId           Int?
  chat             Chat?              @relation("ChatMessages", fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lastMessageChat  Chat?              @relation("LastMessage")
  isLink           Int                @default(0) //0 - message, 1 - pdf , 2 - image, 3 - audio
  fileName         String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  senderUser       User?              @relation(fields: [senderUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderAuthor     Author?            @relation(fields: [senderAuthorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ChatMessageFiles ChatMessageFiles[]
}

model ChatMessageFiles {
  id        Int      @id @default(autoincrement())
  messageId Int
  fileName  String
  createdAt DateTime @default(now())

  message ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model UserActivateChat {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model AuthorActivateChat {
  id        Int      @id @default(autoincrement())
  authorId  Int
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model UserUnreadCount {
  id          Int  @id @default(autoincrement())
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int
  chat        Chat @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId      Int
  unreadCount Int  @default(0)
}

model AuthorUnreadCount {
  id          Int    @id @default(autoincrement())
  author      Author @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId    Int
  chat        Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId      Int
  unreadCount Int    @default(0)
}

model QASession {
  id        Int       @id @default(autoincrement())
  title     String?
  roomId    String?
  authorId  Int
  date      DateTime?
  thumbnail String?
  time      String?
  isActive  Boolean?  @default(true)
  author    Author?   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model ContactIssue {
  id          Int      @id @default(autoincrement())
  name        String?
  description String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int
  isResolved  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}
